"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    # جلب جميع الأصناف
    categories: [Category!]! @paginate(type: CONNECTION)
    category(slug: String! @eq): Category @find

    # جلب جميع المنتجات
    products(hasCategory: _ @whereHasConditions(columns: ["slug"])): [Product!]! @paginate(type: CONNECTION)
    product(id: ID! @eq): Product @find
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Category {
    id: ID!
    name: String!
    slug: String!
    description: String
    products: [Product!]! @hasMany(type: CONNECTION)
}

type Product {
    id: ID!
    name: String!
    description: String
    category: Category @belongsTo
    image: String
    price: Float!
    rating: Float!
}

input CreateCategoryInput {
    name: String!
    slug: String!
    description: String
}

input UpdateCategoryInput {
    name: String!
    slug: String!
    description: String
}

type Mutation {
    createUser(name: String!, email: String! , password:String!): User @create

    createCategory(input: CreateCategoryInput! @spread): Category! @create
    updateCategory(id: ID!, input: UpdateCategoryInput! @spread): Category! @update
    deleteCategory(id: ID! @whereKey): Category! @delete
}

